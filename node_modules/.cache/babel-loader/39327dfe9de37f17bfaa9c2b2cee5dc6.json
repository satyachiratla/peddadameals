{"ast":null,"code":"import _slicedToArray from\"/Users/vivekchowdary/My_World/foodapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/Users/vivekchowdary/My_World/foodapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/vivekchowdary/My_World/foodapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useReducer}from'react';import CartContext from'./cart-context';import{jsx as _jsx}from\"react/jsx-runtime\";var defaultCartItems={items:[],totalAmount:0};var cartReducer=function cartReducer(state,action){if(action.type==='ADD'){var updatedTotalAmount=state.totalAmount+action.item.price*action.item.amount;var existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.item.id;});var existingCartItem=state.items[existingCartItemIndex];var updatedItems;if(existingCartItem){var updatedItem=_objectSpread(_objectSpread({},existingCartItem),{},{amount:existingCartItem.amount+action.item.amount});updatedItems=_toConsumableArray(state.items);updatedItems[existingCartItemIndex]=updatedItem;}else{updatedItems=state.items.concat(action.item);}return{items:updatedItems,totalAmount:updatedTotalAmount};}if(action.type===\"REMOVE\"){var _existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.id;});var existingItem=state.items[_existingCartItemIndex];var _updatedTotalAmount=state.totalAmount-existingItem.price;var _updatedItems;if(existingItem.amount===1){_updatedItems=state.items.filter(function(item){return item.id!==action.id;});}else{var _updatedItem=_objectSpread(_objectSpread({},existingItem),{},{amount:existingItem.amount-1});_updatedItems=_toConsumableArray(state.items);_updatedItems[_existingCartItemIndex]=_updatedItem;}return{items:_updatedItems,totalAmount:_updatedTotalAmount};}if(action.type==='CLEAR'){return defaultCartItems;}return defaultCartItems;};var CartProvider=function CartProvider(props){var _useReducer=useReducer(cartReducer,defaultCartItems),_useReducer2=_slicedToArray(_useReducer,2),cartState=_useReducer2[0],dispatchCartItem=_useReducer2[1];var addItemToCartHandler=function addItemToCartHandler(item){dispatchCartItem({type:'ADD',item:item});};var removeItemToCartHandler=function removeItemToCartHandler(id){dispatchCartItem({type:'REMOVE',id:id});};var clearCartHandler=function clearCartHandler(){dispatchCartItem({type:'CLEAR'});};var cartContext={items:cartState.items,totalAmount:cartState.totalAmount,addItem:addItemToCartHandler,removeItem:removeItemToCartHandler,clearCart:clearCartHandler};return/*#__PURE__*/_jsx(CartContext.Provider,{value:cartContext,children:props.children});};export default CartProvider;","map":{"version":3,"sources":["/Users/vivekchowdary/My_World/foodapp/client/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartItems","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","CartProvider","props","cartState","dispatchCartItem","addItemToCartHandler","removeItemToCartHandler","clearCartHandler","cartContext","addItem","removeItem","clearCart","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport CartContext from './cart-context';\n\nconst defaultCartItems = {\n    items: [],\n    totalAmount: 0\n}\n\nconst cartReducer = (state, action) => {\n    if (action.type === 'ADD') {\n        \n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount\n\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n        const existingCartItem = state.items[existingCartItemIndex];\n\n        let updatedItems;\n        if (existingCartItem) {\n            const updatedItem = { ...existingCartItem, amount: existingCartItem.amount + action.item.amount };\n            updatedItems = [...state.items];\n            updatedItems[existingCartItemIndex] = updatedItem;\n        } else {\n            updatedItems = state.items.concat(action.item);\n        }\n\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        }\n    }\n\n    if (action.type === \"REMOVE\") {\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n        const existingItem = state.items[existingCartItemIndex];\n        const updatedTotalAmount = state.totalAmount - existingItem.price;\n        let updatedItems;\n\n        if (existingItem.amount === 1) {\n            updatedItems = state.items.filter(item => item.id !== action.id)\n        } else {\n            const updatedItem = { ...existingItem, amount: existingItem.amount - 1}\n            updatedItems = [...state.items];\n            updatedItems[existingCartItemIndex] = updatedItem;\n        }\n\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        }\n    }\n\n    if (action.type === 'CLEAR') {\n        return defaultCartItems\n    }\n\n    return defaultCartItems;\n}\n\nconst CartProvider = (props) => {\n\n    const [cartState, dispatchCartItem] = useReducer(cartReducer, defaultCartItems);\n\n    const addItemToCartHandler = (item) => {\n        dispatchCartItem({ type: 'ADD', item: item});\n    };\n\n    const removeItemToCartHandler = (id) => {\n        dispatchCartItem({ type: 'REMOVE', id: id});\n    };\n\n    const clearCartHandler = () => {\n        dispatchCartItem({ type: 'CLEAR'});\n    }\n\n    const cartContext = {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemToCartHandler,\n        clearCart: clearCartHandler\n    };\n\n    return (\n        <CartContext.Provider value={cartContext}>\n            {props.children}\n        </CartContext.Provider>\n    )\n}\n\nexport default CartProvider\n"]},"metadata":{},"sourceType":"module"}